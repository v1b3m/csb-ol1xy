{"version":3,"sources":["App.js","index.js"],"names":["App","useState","password","setPassword","confirmPassword","setConfirmPassword","passwordsEqual","setPasswordsEqual","passwordError","setPasswordError","confirmPasswordError","setConfirmPasswordError","passwordsNotEqualText","passwordErrorText","isValidPassword","useCallback","test","String","useEffect","isPasswordInvalid","isConfirmPasswordInvalid","flexDir","minH","src","height","maxW","fontSize","fontWeight","textAlign","my","onChange","e","target","value","isInvalid","color","rootElement","document","getElementById","ReactDOM","render"],"mappings":"yLAGe,SAASA,IACtB,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8CF,mBAAS,IAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAA4CJ,oBAAS,GAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KACA,EAA0CN,mBAAS,IAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KACA,EAAwDR,mBAAS,IAAjE,mBAAOS,EAAP,KAA6BC,EAA7B,KAEMC,EAAwB,0BACxBC,EACJ,wGAEIC,EAAkBC,uBAAY,SAACb,GAEnC,MADW,0DACDc,KAAKC,OAAOf,MACrB,IAEHgB,qBAAU,WACRT,EACEK,EAAgBZ,IAA0B,KAAbA,EAAkB,GAAKW,KAErD,CAACX,EAAUY,IAEdI,qBAAU,WACRP,EACEG,EAAgBV,IAAwC,KAApBA,EAChC,GACAS,KAEL,CAACT,EAAiBU,IAErBI,qBAAU,WACRX,EAAkBL,IAAaE,KAC9B,CAACF,EAAUE,IAEd,IAAMe,EAAsC,KAAlBX,IAAyBF,EAC7Cc,EACqB,KAAzBV,IAAgCJ,EAElC,OACE,eAAC,IAAD,CAAQe,QAAQ,SAASC,KAAK,QAA9B,UACE,cAAC,IAAD,CACEC,IAAI,2FACJC,OAAQ,KAEV,eAAC,IAAD,CAAKC,KAAM,GAAX,UACE,cAAC,IAAD,CAAMC,SAAU,GAAIC,WAAW,QAAQC,UAAU,SAASC,GAAI,EAA9D,4BAGA,eAAC,IAAD,CAAKA,GAAI,EAAT,UACE,cAAC,IAAD,4BACA,cAAC,IAAD,CACEC,SAAU,SAACC,GAAD,OAAO5B,EAAY4B,EAAEC,OAAOC,QACtCC,UAAWf,IAEZA,GACC,cAAC,IAAD,CAAMgB,MAAM,UAAUT,SAAS,OAA/B,SACqB,KAAlBlB,EAAuBA,EAAgBI,OAI9C,eAAC,IAAD,CAAKiB,GAAI,EAAT,UACE,cAAC,IAAD,gCACA,cAAC,IAAD,CACEC,SAAU,SAACC,GAAD,OAAO1B,EAAmB0B,EAAEC,OAAOC,QAC7CC,UAAWd,IAEZA,GACC,cAAC,IAAD,CAAMe,MAAM,UAAUT,SAAS,OAA/B,SAC4B,KAAzBhB,EACGA,EACAE,OAIV,cAAC,IAAD,CAAQiB,GAAI,EAAZ,0BCxER,IAAMO,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,IAAD,UACE,cAACxC,EAAD,QAGJoC,K","file":"static/js/main.8b1db040.chunk.js","sourcesContent":["import { Box, Center, Image, Text, Input, Button } from \"@chakra-ui/react\";\nimport { useCallback, useEffect, useState } from \"react\";\n\nexport default function App() {\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [passwordsEqual, setPasswordsEqual] = useState(true);\n  const [passwordError, setPasswordError] = useState(\"\");\n  const [confirmPasswordError, setConfirmPasswordError] = useState(\"\");\n\n  const passwordsNotEqualText = \"Passwords are not equal\";\n  const passwordErrorText =\n    \"Password must be at least 8 characters long, containing a number, a lowercase and an uppercase letter\";\n\n  const isValidPassword = useCallback((password) => {\n    const re = /^(?=.{8,}$)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*\\W).*$/;\n    return re.test(String(password));\n  }, []);\n\n  useEffect(() => {\n    setPasswordError(\n      isValidPassword(password) || password === \"\" ? \"\" : passwordErrorText\n    );\n  }, [password, isValidPassword]);\n\n  useEffect(() => {\n    setConfirmPasswordError(\n      isValidPassword(confirmPassword) || confirmPassword === \"\"\n        ? \"\"\n        : passwordErrorText\n    );\n  }, [confirmPassword, isValidPassword]);\n\n  useEffect(() => {\n    setPasswordsEqual(password !== confirmPassword ? false : true);\n  }, [password, confirmPassword]);\n\n  const isPasswordInvalid = passwordError !== \"\" || !passwordsEqual;\n  const isConfirmPasswordInvalid =\n    confirmPasswordError !== \"\" || !passwordsEqual;\n\n  return (\n    <Center flexDir=\"column\" minH=\"100vh\">\n      <Image\n        src=\"https://res.cloudinary.com/v1b3m/image/upload/v1640323421/AfroPay/ic_launcher_acatiz.png\"\n        height={16}\n      />\n      <Box maxW={60}>\n        <Text fontSize={24} fontWeight=\"black\" textAlign=\"center\" my={1}>\n          Reset Password\n        </Text>\n        <Box my={1}>\n          <Text>New Password:</Text>\n          <Input\n            onChange={(e) => setPassword(e.target.value)}\n            isInvalid={isPasswordInvalid}\n          />\n          {isPasswordInvalid && (\n            <Text color=\"red.500\" fontSize=\"12px\">\n              {passwordError !== \"\" ? passwordError : passwordsNotEqualText}\n            </Text>\n          )}\n        </Box>\n        <Box my={1}>\n          <Text>Confirm Password:</Text>\n          <Input\n            onChange={(e) => setConfirmPassword(e.target.value)}\n            isInvalid={isConfirmPasswordInvalid}\n          />\n          {isConfirmPasswordInvalid && (\n            <Text color=\"red.500\" fontSize=\"12px\">\n              {confirmPasswordError !== \"\"\n                ? confirmPasswordError\n                : passwordsNotEqualText}\n            </Text>\n          )}\n        </Box>\n        <Button my={2}>SUBMIT</Button>\n      </Box>\n    </Center>\n  );\n}\n","import { ChakraProvider } from \"@chakra-ui/react\";\nimport { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}